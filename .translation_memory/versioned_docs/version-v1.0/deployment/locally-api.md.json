{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-v1.0/deployment/locally-api.md",
  "source_file_content_hash": "38a29b8143e10e5af3c192d06067c23683f01df34e59d1e2af0b0d273499cebe",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nsidebar_label: API\ntitle: Flagsmith REST API\nsidebar_position: 10\n---",
      "source_content_hash": "6fa4b7a85c652e398650680d3b430694195be29f9bae9769bbfbb723e429415c",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "a703643c",
      "source_content": "## Development Environment",
      "source_content_hash": "82e0b996f28827b122f677144f8bca621509163a27e23f6175276d55080c21b4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 开发环境"
      }
    },
    {
      "segment_id": "53eaf0e1",
      "source_content": "Before running the application, you'll need to configure a database for the application. The steps to do this can be\nfound in the following section entitled 'Databases'.",
      "source_content_hash": "1d0f0ed299fff40c36e952f1f8bdf4ccc96611fb07b78525a7d016ff25fcec73",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在运行应用程序之前，您需要为其配置数据库。具体操作步骤请参阅下文\"数据库\"章节。"
      }
    },
    {
      "segment_id": "ee201347",
      "source_content": "```bash\nvirtualenv .venv\nsource .venv/bin/activate\npip install pip-tools\ncd api\npip-sync requirements.txt requirements-dev.txt\npython manage.py migrate\npython manage.py runserver --nostatic\n```",
      "source_content_hash": "4f0e76f572a351b8626d8697278fbb1faea9093e602fc5671af462da5b32a95a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_ee201347"
      }
    },
    {
      "segment_id": "2df4f75f",
      "source_content": "You can now visit `http://<your-server-domain:8000>/api/v1/users/config/init/` to create an initial Superuser and\nprovide DNS settings for your installation.",
      "source_content_hash": "5416f53a36b2173826d6dda8933029613fe95239f12686298128f7c5869518e8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "现在您可以访问 `http://<您的服务器域名:8000>/api/v1/users/config/init/` 来创建初始超级用户并为您的安装配置DNS设置。"
      }
    },
    {
      "segment_id": "f2c2bdd0",
      "source_content": "Note: if you're running on on MacOS and you find some issues installing the dependencies (specifically around pyre2),\nyou may need to run the following:",
      "source_content_hash": "ae7ba00e4b96650d7df8c68e7dd7607836dfd6c21e78617b8f5e5164f7b64b45",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "注意：如果在MacOS上运行并遇到依赖安装问题（特别是pyre2相关），可能需要执行以下命令："
      }
    },
    {
      "segment_id": "15a1fd96",
      "source_content": "```bash\nbrew install cmake re2\n```",
      "source_content_hash": "8534364fef303247ce61082aea995213254d4875c5cea97010691514853f9843",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_15a1fd96"
      }
    },
    {
      "segment_id": "73ab96a3",
      "source_content": "The application can also be run locally using Docker Compose if required, however, it's beneficial to run locally using\nthe above steps as it gives you hot reloading. To run using docker compose, simply run the following command from the\nproject root:",
      "source_content_hash": "61676bc8ead7d55419a24400bfe92e1b707223992f45bfbe27728ec7611d9141",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如需使用Docker Compose本地运行应用程序，可在项目根目录执行以下命令。但建议采用上述方式运行以获得热重载功能："
      }
    },
    {
      "segment_id": "076d64d1",
      "source_content": "```bash\ngit clone https://github.com/Flagsmith/self-hosted.git\ncd self-hosted\ndocker-compose up\n```",
      "source_content_hash": "0da26a6925beba29c7b22867b15119cb75f30edad806d7440dbe459e19d3da8e",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_076d64d1"
      }
    },
    {
      "segment_id": "8d04259b",
      "source_content": "## Databases",
      "source_content_hash": "31b73f1b7d7360e90a65e83e60c6109a7ea44a3af5e90e68533a5b2bae08d143",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 数据库"
      }
    },
    {
      "segment_id": "95e9ba12",
      "source_content": "Databases are configured in app/settings/\\<env\\>.py",
      "source_content_hash": "53389a0f5bc2ae536dd831ea9b8689731c4cce88665e5030cdc924de9358ad6e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "数据库配置位于app/settings/\\<环境\\>.py文件中"
      }
    },
    {
      "segment_id": "8af76f3d",
      "source_content": "The app is configured to use PostgreSQL for all environments.",
      "source_content_hash": "32b35cba3af78eff94b53bd28aec86b768e89f8258132d58ea945e631a532d57",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "应用程序默认在所有环境中使用PostgreSQL数据库。"
      }
    },
    {
      "segment_id": "a9d49f92",
      "source_content": "When running locally, you'll need a local instance of postgres running. The easiest way to do this is to use docker\nwhich is achievable with the following command:",
      "source_content_hash": "fde22038e0e32a33e328544e2d0fd18b2dd6806ecea617186fbb7c2fd15371db",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "本地运行时，您需要运行本地PostgreSQL实例。最简单的方式是使用Docker，执行以下命令即可："
      }
    },
    {
      "segment_id": "c504c207",
      "source_content": "`docker-compose -f docker/db.yaml up -d`",
      "source_content_hash": "51ecb86e4bde46c182c0aa2b3b243f0292e32f6b10e5fae54ab048ef102e4f65",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`docker-compose -f docker/db.yaml up -d`"
      }
    },
    {
      "segment_id": "98d26038",
      "source_content": "You'll also need to ensure that you have a value for POSTGRES_PASSWORD set as an environment variable on your\ndevelopment machine.",
      "source_content_hash": "8cab5f3b994a7574ea52ba55ef3d118e3febf133ec367b7a36b9e77ae8221a8b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "同时需确保开发机上设置了POSTGRES_PASSWORD环境变量。"
      }
    },
    {
      "segment_id": "b9aaa519",
      "source_content": "When running on a Heroku-ish platform, the application reads the database connection in production from an environment\nvariable called `DATABASE_URL`. This should be configured in the Heroku-ish application configuration.",
      "source_content_hash": "b2e117ced70738ef0ed0720b8fd5662c95bf2c313de0819884cba05645fe1e6d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在Heroku类平台上运行时，应用程序会从名为`DATABASE_URL`的环境变量读取生产环境数据库连接，该变量应在Heroku类应用配置中设置。"
      }
    },
    {
      "segment_id": "23dfb152",
      "source_content": "When running the application using Docker, it reads the database configuration from the settings located in\n`app.settings.production`",
      "source_content_hash": "1224059ccd472d61d0faf6350b586abe3d7d9b17c80f9b95d39e9cc0248d8261",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "使用Docker运行时，应用程序会读取`app.settings.production`中的数据库配置。"
      }
    },
    {
      "segment_id": "c431704b",
      "source_content": "## Initialising",
      "source_content_hash": "ceb8a2b69e2ad9af3da24a6ede5c8e5e7dacc92ace053ae66752d7b5923ad7dd",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 初始化"
      }
    },
    {
      "segment_id": "79ad944d",
      "source_content": "The application is built using django which comes with a handy set of admin pages available at `/admin/`. To access\nthese, you'll need to create a super user. This user can also be used to access the admin pages or the application\nitself if you have the frontend application running as well. This user can be created using the instructions below\ndependent on your installation:",
      "source_content_hash": "59677346c1f854f517b1bd163087d0e982382edee0425ce6e9f1dbff8c905295",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "本应用基于django框架构建，自带可通过`/admin/`访问的管理界面。要使用这些功能，您需要创建超级用户。该用户既可用于访问管理界面，也可在前端应用运行时直接登录系统。根据您的安装方式，可通过以下指引创建用户："
      }
    },
    {
      "segment_id": "3ef18741",
      "source_content": "### Locally",
      "source_content_hash": "8481655854556c2b1ed16243de4fc4fcf9900844098673398ef22c1a50206aca",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 本地环境"
      }
    },
    {
      "segment_id": "17c579d2",
      "source_content": "```bash\ncd api\npython manage.py createsuperuser\n```",
      "source_content_hash": "8935bf4ac1cda9f053b46d507a302e41746db39e24de0fba335d9435e7d16e87",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_17c579d2"
      }
    },
    {
      "segment_id": "b051b70c",
      "source_content": "### Environments with no direct console access (e.g. Heroku, ECS)",
      "source_content_hash": "665cfb1302adb19ac0576b5e4102aecba44a6082a08372ee17d1f438896b3d3a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 无直接控制台访问的环境（如Heroku、ECS）"
      }
    },
    {
      "segment_id": "d0dd855b",
      "source_content": "Once the app has been deployed, you can initialise your installation by accessing `/api/v1/users/config/init/`. This\nwill show a page with a basic form to set up some initial data for the platform. Each of the parameters in the form are\ndescribed below.",
      "source_content_hash": "f5634db47236b5c07f69d254aaf9484b06abb76a171d1dac009b44f89ee2d891",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "应用部署后，可通过访问`/api/v1/users/config/init/`初始化安装。该页面将显示基础表单用于设置平台的初始数据，表单各参数说明如下："
      }
    },
    {
      "segment_id": "ccada9d2",
      "source_content": "| Parameter name | Description                                                                                                                      |\n| -------------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| Username       | A unique username to give the installation super user                                                                            |\n| Email          | The email address to give the installation super user                                                                            |\n| Password       | The password to give the installation super user                                                                                 |\n| Site name      | A human readable name for the site, e.g. 'Flagsmith'                                                                             |\n| Site domain    | The domain that the FE of the site will be running on, e.g. app.flagsmith.com. This will be used for e.g. password reset emails. |",
      "source_content_hash": "3b250f082bbd4e79ec2c6d76c2db013fb688d902a5bd5197ffa380777c3557eb",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_ccada9d2"
      }
    },
    {
      "segment_id": "0750bfa1",
      "source_content": "Once you've created the super user, you can use the details to log in at `/admin/`. From here, you can create an\norganisation and either create another user or simply assign the organisation to your admin user to begin using the\napplication.",
      "source_content_hash": "4b866625f692a09d11ff5feca360ce77df80df6ebe21e7f41c9569698d66cc54",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "创建超级用户后，您可使用该凭证登录`/admin/`。在此可以创建组织，并选择新建用户或将组织分配给管理员用户以开始使用应用。"
      }
    },
    {
      "segment_id": "6b77b644",
      "source_content": "Further information on the admin pages can be found [here](/deployment/configuration/django-admin).",
      "source_content_hash": "ea517418ea5e7d8bada10ac7cfb094cf16256c32ccf05232e2df86b71ab1f119",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "更多关于管理界面的信息请参阅[此处](/deployment/configuration/django-admin)。"
      }
    },
    {
      "segment_id": "5baf88e2",
      "source_content": "## Deploying",
      "source_content_hash": "ff96d35008f56060f8c923806638c98f7cd70de5be8adff23189fc078d56d99e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 部署"
      }
    },
    {
      "segment_id": "f8edb6d2",
      "source_content": "### Using Heroku-ish Platform (e.g. Heroku, Dokku, Flynn)",
      "source_content_hash": "a09acb1ce4b0607b790d62829faf352d65d82d0381fc9a9b70b57df3a2c68b75",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 使用Heroku类平台（如Heroku、Dokku、Flynn）"
      }
    },
    {
      "segment_id": "1862c5fe",
      "source_content": "The application should run on any Heroku-ish platform (e.g. Dokku, Flynn) by simply adding the required git repo and\npushing the code. The code for running the app is contained in the Procfile.",
      "source_content_hash": "83eb18c8247698439e6c43c9377c32fbda56e7aa1beb7f7d75e3c595dc8a4efd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "本应用可通过简单的git仓库添加和代码推送运行在任何Heroku类平台（如Dokku、Flynn）上。运行逻辑包含在Procfile中。"
      }
    },
    {
      "segment_id": "d79a4831",
      "source_content": "To get it running, you'll need to add the necessary config variables as outlined below.",
      "source_content_hash": "3adb69210fb9d3ce2e9a997f1d8def3d11faf82c439c490be87863f3d9055a0a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "要成功运行，您需要按照下文说明配置必要的环境变量。"
      }
    },
    {
      "segment_id": "54bafb10",
      "source_content": "### Using ElasticBeanstalk",
      "source_content_hash": "68220df5df4297269cc22deeb399cf1e02c0a95e1ddcccb48dd55457b293f872",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 使用ElasticBeanstalk"
      }
    },
    {
      "segment_id": "4be28ed1",
      "source_content": "The application will run within ElasticBeanstalk using the default Python setup. We've included the .ebextensions/ and\n.elasticbeanstalk/ directories which will run on ElasticBeanstalk.",
      "source_content_hash": "bedf620ddf82054872c4c147c9257a114115945ad247a8652e379aef8cd6c91e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "应用可在ElasticBeanstalk上通过默认Python设置运行。我们已包含.ebextensions/和.elasticbeanstalk/目录，这些配置可直接在ElasticBeanstalk上运行。"
      }
    },
    {
      "segment_id": "a81544fd",
      "source_content": "The changes required to run in your environment will be as follows",
      "source_content_hash": "09f09035e3288b75608da7e58eb805ada4a6cf83a2f96b763c86a7b3eac0298a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "根据您的环境需要进行的修改如下："
      }
    },
    {
      "segment_id": "0801d969",
      "source_content": "`.elasticbeanstalk/config.yml` - update application_name and default_region to the relevant variables for your setup.",
      "source_content_hash": "588d45bcdf92582f9c177c144c1fa5e34547fe6411ecb6b7a2efec30ee01c5ad",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`.elasticbeanstalk/config.yml` - 将 application_name 和 default_region 更新为您环境对应的变量值。"
      }
    },
    {
      "segment_id": "3c19e221",
      "source_content": "`.ebextensions/options.config` - within the root of the project `generate.sh` will add in all environment variables that\nare required using your chosen CI/CD. Alternatively, you can add your own `options.config`.",
      "source_content_hash": "7c88f2c05a9b3711ada7676b83d3f8a887a58e21f3c55f99c901cce2df43ef11",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`.ebextensions/options.config` - 在项目根目录下，`generate.sh` 脚本会通过您选择的 CI/CD 流程自动注入所有必需的环境变量。您也可以手动添加自己的 `options.config` 文件。"
      }
    },
    {
      "segment_id": "48155948",
      "source_content": "### Using Docker",
      "source_content_hash": "fe5d06c04077cd59eb1b37bf4c918af02409266bf43e2ac5c4c03263d7f341ac",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 使用 Docker"
      }
    },
    {
      "segment_id": "1958bc43",
      "source_content": "If you want to run the entire Flagsmith platform, including the front end dashboard, take a look at our\n[Flagsmith Docker repository](https://github.com/Flagsmith/self-hosted).",
      "source_content_hash": "c31bcd503269017af5486f5029c1f0593bae7ee45178aad4fea1deba142799e4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如需运行完整的 Flagsmith 平台（包括前端仪表盘），请参阅我们的 [Flagsmith Docker 仓库](https://github.com/Flagsmith/self-hosted)。"
      }
    },
    {
      "segment_id": "558df877",
      "source_content": "The application can be configured to run using docker with simply by running the following command:",
      "source_content_hash": "033f1b65faa25c8e9369cd680229d2e2b8fac22d7ad40670aa093874c5e36ce2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "只需运行以下命令即可通过 Docker 配置并启动应用："
      }
    },
    {
      "segment_id": "6f605d92",
      "source_content": "```bash\ngit clone https://github.com/Flagsmith/self-hosted.git\ncd self-hosted\ndocker-compose up\n```",
      "source_content_hash": "0da26a6925beba29c7b22867b15119cb75f30edad806d7440dbe459e19d3da8e",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_6f605d92"
      }
    },
    {
      "segment_id": "c364340c",
      "source_content": "This will use some default settings created in the `docker-compose.yml` file located in the root of the project. These\nshould be changed before using in any production environments.",
      "source_content_hash": "03b5a1c9568cdb68999147809159d80a8dda68349d60c4454a843515d830cba7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "这将使用项目根目录下 `docker-compose.yml` 文件中预设的默认配置。在生产环境中使用前请务必修改这些配置。"
      }
    },
    {
      "segment_id": "9c9e2b64",
      "source_content": "The docker container also accepts an argument that sets the access log file location for gunicorn. By default this is\nset to /dev/null to maintain the default behaviour of gunicorn. It can either be set to `\"-\"` to redirect the logs to\nstdout or to a location on the file system as required.",
      "source_content_hash": "7e635edd1b340587d1b00ed85b3e2eeda17b27fe8bb19ae80c87d9bf9d00bf28",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Docker 容器还支持通过参数设置 gunicorn 的访问日志存储路径。默认值为 /dev/null 以保持 gunicorn 的原始行为。可设置为 `\"-\"` 将日志重定向到标准输出，或指定为文件系统路径。"
      }
    },
    {
      "segment_id": "a461a67b",
      "source_content": "### Environment Variables",
      "source_content_hash": "cf47b598f19e2ab5c3a60c13e61a54b2a5a531397397306826f70b68854f94b2",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 环境变量"
      }
    },
    {
      "segment_id": "e77cf7c6",
      "source_content": "The application relies on the following environment variables to run:",
      "source_content_hash": "e0dc2124f6cab9742791e0543f4295db06f3131d9e333a2784ef56d48c488619",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "应用运行依赖以下环境变量："
      }
    },
    {
      "segment_id": "fff17ff8",
      "source_content": "#### Database Environment Variables",
      "source_content_hash": "817457e3336f374c483eade86f7c1442460ec8b20911df3c2b937c7b747b8d18",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "#### 数据库环境变量"
      }
    },
    {
      "segment_id": "b459cfc1",
      "source_content": "- `DATABASE_URL`: required by develop and production environments, should be a standard format database url e.g.\n  postgres://user:password@host:port/db_name",
      "source_content_hash": "a2f25a77a59a18fb6ae2734689c363a4b966b8a926c9597ccdf365809fa265d0",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- `DATABASE_URL`: 开发和生产环境必需，需为标准格式的数据库连接字符串，例如 postgres://用户:密码@主机:端口/数据库名"
      }
    },
    {
      "segment_id": "cfeb9eb1",
      "source_content": "You can also provide individual variables as below. Note that if a `DATABASE_URL` is defined, it will take precedent and\nthe below variables will be ignored.",
      "source_content_hash": "3170a65448394b43af466575a4560829562daff097061f0782b6228065d77aeb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "您也可以单独配置以下变量。注意：若已定义 `DATABASE_URL`，则以下变量将被忽略。"
      }
    },
    {
      "segment_id": "739843fe",
      "source_content": "- `DJANGO_DB_HOST`: Database hostname\n- `DJANGO_DB_NAME`: Database name\n- `DJANGO_DB_USER`: Database username\n- `DJANGO_DB_PASSWORD`: Database password\n- `DJANGO_DB_PORT`: Database port",
      "source_content_hash": "144982574c413d933d2f47448ab58b7270b9fd500582961763c37c878fded025",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- `DJANGO_DB_HOST`: 数据库主机名\n- `DJANGO_DB_NAME`: 数据库名称  \n- `DJANGO_DB_USER`: 数据库用户名\n- `DJANGO_DB_PASSWORD`: 数据库密码\n- `DJANGO_DB_PORT`: 数据库端口"
      }
    },
    {
      "segment_id": "55dc794c",
      "source_content": "#### Application Environment Variables",
      "source_content_hash": "a86396103f1ab170da55c7c919f65b7fa208ed08ac1a23de259a984082c4c572",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "#### 应用环境变量"
      }
    },
    {
      "segment_id": "e99d73d3",
      "source_content": "- `ENV`: string representing the current running environment, e.g. 'local', 'dev', 'prod'. Defaults to 'local'\n- `DJANGO_SECRET_KEY`: secret key required by Django, if one isn't provided one will be created using\n  `django.core.management.utilsget_random_secret_key`\n- `LOG_LEVEL`: DJANGO logging level. Can be one of `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`\n- `ACCESS_LOG_LOCATION`: The location to store web logs generated by gunicorn if running as a Docker container. If not\n  set, no logs will be stored. If set to `-` the logs will be sent to `stdout`.\n- `DJANGO_SETTINGS_MODULE`: python path to settings file for the given environment, e.g. \"app.settings.develop\"\n- `ENABLE_GZIP_COMPRESSION`: If Django should gzip compress HTTP responses. Defaults to `False`.\n- `GOOGLE_ANALYTICS_KEY`: if google analytics is required, add your tracking code\n- `GOOGLE_SERVICE_ACCOUNT`: service account json for accessing the google API, used for getting usage of an\n  organisation - needs access to analytics.readonly scope\n- `INFLUXDB_TOKEN`: If you want to send API events to InfluxDB, specify this write token.\n- `INFLUXDB_URL`: The URL for your InfluxDB database\n- `INFLUXDB_ORG`: The organisation string for your InfluxDB API call.\n- `GA_TABLE_ID`: GA table ID (view) to query when looking for organisation usage\n- `USER_CREATE_PERMISSIONS`: set the permissions for creating new users, using a comma separated list of djoser or\n  rest_framework permissions. Use this to turn off public user creation for self hosting. e.g.\n  `'djoser.permissions.CurrentUserOrAdmin'` Defaults to `'rest_framework.permissions.AllowAny'`.\n- `ALLOW_REGISTRATION_WITHOUT_INVITE`: Determines whether users can register without an invite. Defaults to True. Set to\n  False or 0 to disable. Note that if disabled, new users must be invited via email.\n- `ENABLE_EMAIL_ACTIVATION`: new user registration will go via email activation flow, default False\n- `SENTRY_SDK_DSN`: If using Sentry, set the project DSN here.\n- `SENTRY_TRACE_SAMPLE_RATE`: Float. If using Sentry, sets the trace sample rate. Defaults to 1.0.\n- `DEFAULT_ORG_STORE_TRAITS_VALUE`: Boolean. Set this flag to ensure new organisations default to not persisting traits.\n  Useful for data sensitive installations that don't want persistent traits.\n- `OAUTH_CLIENT_ID`: Google OAuth Client ID to enable accessing django admin pages via Google OAuth. See the\n  [Django Admin SSO package](https://pypi.org/project/django-admin-sso/) for information on how to set users up to\n  access the admin pages via SSO.\n- `OAUTH_CLIENT_SECRET`: Google OAuth Secret to enable accessing django admin pages via Google OAuth.\n- `ENABLE_ADMIN_ACCESS_USER_PASS`: Boolean. Set this flag to enable login to admin panel using username and password.\n- `USE_X_FORWARDED_HOST`: Boolean. Default `False`. Specifies whether to use the X-Forwarded-Host header in preference\n  to the Host header. This should only be enabled if a proxy which sets this header is in use.\n  [More Info](https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-USE_X_FORWARDED_HOST).\n- `SECURE_PROXY_SSL_HEADER_NAME`: String. The name of the header looked for by Django's\n  [`SECURE_PROXY_SSL_HEADER`](https://docs.djangoproject.com/en/4.0/ref/settings/#secure-proxy-ssl-header). Defaults to\n  `HTTP_X_FORWARDED_PROTO`.\n- `SECURE_PROXY_SSL_HEADER_VALUE`: String. The value of the header looked for by Django's\n  [`SECURE_PROXY_SSL_HEADER`](https://docs.djangoproject.com/en/4.0/ref/settings/#secure-proxy-ssl-header). Defaults to\n  `https`.\n- `DJANGO_SECURE_REDIRECT_EXEMPT`: List. Passthrough of Django's\n  [`SECURE_REDIRECT_EXEMPT`](https://docs.djangoproject.com/en/4.0/ref/settings/#secure-redirect-exempt). Defaults to an\n  empty list `[]`.\n- `DJANGO_SECURE_REFERRER_POLICY`: String. Passthrough of Django's\n  [`SECURE_REFERRER_POLICY`](https://docs.djangoproject.com/en/4.0/ref/settings/#secure-referrer-policy). Defaults to\n  `same-origin`.\n- `DJANGO_SECURE_SSL_HOST`: String. Passthrough of Django's\n  [`SECURE_SSL_HOST`](https://docs.djangoproject.com/en/4.0/ref/settings/#secure-ssl-host). Defaults to `None`.\n- `DJANGO_SECURE_SSL_REDIRECT`: Boolean. Passthrough of Django's\n  [`SECURE_SSL_REDIRECT`](https://docs.djangoproject.com/en/4.0/ref/settings/#secure-ssl-redirect). Defaults to `False`.\n- [`APPLICATION_INSIGHTS_CONNECTION_STRING`](https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview).\n  String. Connection string to set up Flagsmith to send telemetry to Azure Application Insights.\n- [`OPENCENSUS_SAMPLING_RATE`](https://opencensus.io/tracing/sampling/probabilistic/): Float. The tracer sample rate.",
      "source_content_hash": "ca98f5865f6263b8207bd8c0f766fdff815a954ce720c762297830c28437b035",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- `ENV`: 字符串表示当前运行环境，例如 'local'、'dev'、'prod'，默认为 'local'\n- `DJANGO_SECRET_KEY`: Django 所需的密钥，若未提供则会通过 `django.core.management.utilsget_random_secret_key` 自动生成\n- `LOG_LEVEL`: Django 日志级别，可选值为 `DEBUG`、`INFO`、`WARNING`、`ERROR`、`CRITICAL`\n- `ACCESS_LOG_LOCATION`: Docker 容器运行时存储 gunicorn 生成的 Web 日志的位置。若未设置则不存储日志，设为 `-` 则输出到 `stdout`\n- `DJANGO_SETTINGS_MODULE`: 当前环境对应的 Python 设置文件路径，例如 \"app.settings.develop\"\n- `ENABLE_GZIP_COMPRESSION`: 是否启用 Django 的 HTTP 响应 Gzip 压缩，默认为 `False`\n- `GOOGLE_ANALYTICS_KEY`: 如需 Google Analytics 支持，请填入跟踪代码\n- `GOOGLE_SERVICE_ACCOUNT`: 访问 Google API 的服务账号 JSON 文件，用于获取组织使用情况 - 需具备 analytics.readonly 权限\n- `INFLUXDB_TOKEN`: 如需将 API 事件发送至 InfluxDB，请指定写入令牌\n- `INFLUXDB_URL`: InfluxDB 数据库 URL\n- `INFLUXDB_ORG`: InfluxDB API 调用的组织标识符\n- `GA_TABLE_ID`: 查询组织使用情况时的 GA 表格 ID（视图）\n- `USER_CREATE_PERMISSIONS`: 通过逗号分隔的 djoser 或 rest_framework 权限列表设置新用户创建权限。可用于关闭自托管环境的公开用户注册，例如 `'djoser.permissions.CurrentUserOrAdmin'`，默认为 `'rest_framework.permissions.AllowAny'`\n- `ALLOW_REGISTRATION_WITHOUT_INVITE`: 是否允许无邀请注册用户，默认为 True。设为 False 或 0 禁用。注意禁用后新用户必须通过邮件邀请注册\n- `ENABLE_EMAIL_ACTIVATION`: 新用户注册是否启用邮件激活流程，默认为 False\n- `SENTRY_SDK_DSN`: 使用 Sentry 时请设置项目 DSN\n- `SENTRY_TRACE_SAMPLE_RATE`: 浮点数。使用 Sentry 时设置跟踪采样率，默认为 1.0\n- `DEFAULT_ORG_STORE_TRAITS_VALUE`: 布尔值。设置此标志可使新组织默认不持久化特征，适用于对数据敏感且不需要持久化特征的部署场景\n- `OAUTH_CLIENT_ID`: 用于通过 Google OAuth 访问 Django 管理页面的客户端 ID。参见 [Django Admin SSO 包](https://pypi.org/project/django-admin-sso/) 了解如何配置用户通过 SSO 访问管理页面\n- `OAUTH_CLIENT_SECRET`: 用于通过 Google OAuth 访问 Django 管理页面的客户端密钥\n- `ENABLE_ADMIN_ACCESS_USER_PASS`: 布尔值。设置此标志可启用通过用户名密码登录管理面板\n- `USE_X_FORWARDED_HOST`: 布尔值。默认为 `False`。指定是否优先使用 X-Forwarded-Host 头而非 Host 头。仅当使用设置此头的代理时应启用。[更多信息](https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-USE_X_FORWARDED_HOST)\n- `SECURE_PROXY_SSL_HEADER_NAME`: 字符串。Django [`SECURE_PROXY_SSL_HEADER`](https://docs.djangoproject.com/en/4.0/ref/settings/#secure-proxy-ssl-header) 所查找的头部名称，默认为 `HTTP_X_FORWARDED_PROTO`\n- `SECURE_PROXY_SSL_HEADER_VALUE`: 字符串。Django [`SECURE_PROXY_SSL_HEADER`](https://docs.djangoproject.com/en/4.0/ref/settings/#secure-proxy-ssl-header) 所查找的头部值，默认为 `https`\n- `DJANGO_SECURE_REDIRECT_EXEMPT`: 列表。透传 Django 的 [`SECURE_REDIRECT_EXEMPT`](https://docs.djangoproject.com/en/4.0/ref/settings/#secure-redirect-exempt)，默认为空列表 `[]`\n- `DJANGO_SECURE_REFERRER_POLICY`: 字符串。透传 Django 的 [`SECURE_REFERRER_POLICY`](https://docs.djangoproject.com/en/4.0/ref/settings/#secure-referrer-policy)，默认为 `same-origin`\n- `DJANGO_SECURE_SSL_HOST`: 字符串。透传 Django 的 [`SECURE_SSL_HOST`](https://docs.djangoproject.com/en/4.0/ref/settings/#secure-ssl-host)，默认为 `None`\n- `DJANGO_SECURE_SSL_REDIRECT`: 布尔值。透传 Django 的 [`SECURE_SSL_REDIRECT`](https://docs.djangoproject.com/en/4.0/ref/settings/#secure-ssl-redirect)，默认为 `False`\n- [`APPLICATION_INSIGHTS_CONNECTION_STRING`](https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview): 字符串。用于配置 Flagsmith 向 Azure Application Insights 发送遥测数据的连接字符串\n- [`OPENCENSUS_SAMPLING_RATE`](https://opencensus.io/tracing/sampling/probabilistic/): 浮点数。跟踪器采样率"
      }
    },
    {
      "segment_id": "bf3eb388",
      "source_content": "#### Security Environment Variables",
      "source_content_hash": "a3a9127f8aa83aace667bda78cd563c3d06c791ed1ba56bf9ae73a49b1a3287a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "#### 安全相关环境变量"
      }
    },
    {
      "segment_id": "7425ba22",
      "source_content": "- `ALLOWED_ADMIN_IP_ADDRESSES`: restrict access to the django admin console to a comma separated list of IP addresses\n  (e.g. `127.0.0.1,127.0.0.2`)\n- `DJANGO_ALLOWED_HOSTS`: comma separated list of hosts the application will run on in the given environment\n- `DJANGO_CSRF_TRUSTED_ORIGINS`: comma separated list of hosts to allow unsafe (POST, PUT) requests from. Useful for\n  allowing localhost to set traits in development.\n- `AXES_ONLY_USER_FAILURES`: If True, only lock based on username, and never lock based on IP if attempts exceed the\n  limit. Otherwise utilize the existing IP and user locking logic. Defaults to `True`.\n- `AXES_FAILURE_LIMIT`: The integer number of login attempts allowed before a record is created for the failed logins.\n  Defaults to `10`.",
      "source_content_hash": "39a9fe00f6a06b8f672b9d1bbd59dad4f67eda933016fa0ede7ca70dcd41a964",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- `ALLOWED_ADMIN_IP_ADDRESSES`: 限制访问Django管理控制台的IP地址列表（以逗号分隔，例如`127.0.0.1,127.0.0.2`）\n- `DJANGO_ALLOWED_HOSTS`: 指定应用在特定环境下可运行的主机列表（以逗号分隔）\n- `DJANGO_CSRF_TRUSTED_ORIGINS`: 允许发起非安全请求（POST/PUT）的主机列表（以逗号分隔）。适用于开发环境中允许localhost设置特征值。\n- `AXES_ONLY_USER_FAILURES`: 若为True，仅基于用户名锁定，超过尝试次数后永不基于IP锁定。否则使用现有的IP和用户锁定逻辑。默认为`True`。\n- `AXES_FAILURE_LIMIT`: 允许的登录尝试失败次数阈值，超过后将创建失败记录。默认为`10`。"
      }
    },
    {
      "segment_id": "976a3cd0",
      "source_content": "#### Email Environment Variables",
      "source_content_hash": "f5ba6d0b06866f608c14439720d4cc44321581c0a3db3a6570ec8db569444493",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "#### 邮件相关环境变量"
      }
    },
    {
      "segment_id": "9112aec3",
      "source_content": ":::note\n\nYou can self host Flagsmith without setting up an email server/gateway. You can invite additional users to the platform\nusing invitation links, and the platform will run fine without email.\n\n:::",
      "source_content_hash": "af6903408379cecd9fc77af2dc680b36ecc1a24e0f0c4014cc7ac53a23cdf539",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::note\n\n您可以在不配置邮件服务器/网关的情况下自托管Flagsmith。通过邀请链接添加平台用户，系统无需邮件功能即可正常运行。\n\n:::"
      }
    },
    {
      "segment_id": "26a4cc09",
      "source_content": ":::tip\n\nFlagsmith makes use of the `django_site` table to provide the domain name for email template links. You will need to\nconfigure the record in this table to point to your domain for email links to work.\n\n:::",
      "source_content_hash": "53b2fb14a05195450fe3d2c41463e1a9cef6a2b7251d0ce837bafce0cb802f78",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::tip\n\nFlagsmith使用`django_site`表提供邮件模板链接的域名。需配置该表中的记录指向您的域名，邮件链接才能生效。\n\n:::"
      }
    },
    {
      "segment_id": "d3c632bb",
      "source_content": "- `SENDER_EMAIL`: Email address from which emails are sent\n- `EMAIL_BACKEND`: One of:\n  - `django.core.mail.backends.smtp.EmailBackend`\n  - `sgbackend.SendGridBackend`\n  - `django_ses.SESBackend`",
      "source_content_hash": "28d65f6e9f24f0548cdb496e3b4374ad1b968ea81030bdc013118c73a28efe67",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- `SENDER_EMAIL`: 发送邮件的发件地址\n- `EMAIL_BACKEND`: 可选以下之一：\n  - `django.core.mail.backends.smtp.EmailBackend`\n  - `sgbackend.SendGridBackend`\n  - `django_ses.SESBackend`"
      }
    },
    {
      "segment_id": "dfb6fc67",
      "source_content": "If using `django.core.mail.backends.smtp.EmailBackend` you will need to configure:",
      "source_content_hash": "8e812fd7724e73b573c294ce93f4d52afe20bc09aeba1f719b3cd8f2b7dd1861",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若使用`django.core.mail.backends.smtp.EmailBackend`需配置："
      }
    },
    {
      "segment_id": "d82dd782",
      "source_content": "- `EMAIL_HOST` = env(\"EMAIL_HOST\", default='localhost')\n- `EMAIL_HOST_USER` = env(\"EMAIL_HOST_USER\", default=None)\n- `EMAIL_HOST_PASSWORD` = env(\"EMAIL_HOST_PASSWORD\", default=None)\n- `EMAIL_PORT` = env(\"EMAIL_PORT\", default=587)\n- `EMAIL_USE_TLS` = env.bool(\"EMAIL_USE_TLS\", default=True)",
      "source_content_hash": "2f10f4d12f1cdd733052929e0169982417ffbaa43e8cc3a8a7211ba0a5548586",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- `EMAIL_HOST` = env(\"EMAIL_HOST\", default='localhost')\n- `EMAIL_HOST_USER` = env(\"EMAIL_HOST_USER\", default=None)\n- `EMAIL_HOST_PASSWORD` = env(\"EMAIL_HOST_PASSWORD\", default=None)\n- `EMAIL_PORT` = env(\"EMAIL_PORT\", default=587)\n- `EMAIL_USE_TLS` = env.bool(\"EMAIL_USE_TLS\", default=True)"
      }
    },
    {
      "segment_id": "b0c30ab4",
      "source_content": "If using `sgbackend.SendGridBackend` you will need to configure:",
      "source_content_hash": "ff7aa72948bc5fccccccbce49b885fc48b4baf25ab10ca2d2586914d93fa9bbf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若使用`sgbackend.SendGridBackend`需配置："
      }
    },
    {
      "segment_id": "2aad2645",
      "source_content": "- `SENDGRID_API_KEY`: API key for the Sendgrid account",
      "source_content_hash": "c290bdf7ed42e45fb7e6e1b74e54602ea404066d8b21595106db0ac7773f46f1",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- `SENDGRID_API_KEY`: Sendgrid账户的API密钥"
      }
    },
    {
      "segment_id": "13440cd7",
      "source_content": "If using AWS SES you will need to configure:",
      "source_content_hash": "03bb4e5cb2c5634484ca55b0df749203997654458fb2d4dca9e50b200422965a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若使用AWS SES需配置："
      }
    },
    {
      "segment_id": "7e7d40e1",
      "source_content": "- `AWS_SES_REGION_NAME`: If using Amazon SES as the email provider, specify the region (e.g. eu-central-1) that contains\n  your verified sender e-mail address. Defaults to us-east-1\n- `AWS_SES_REGION_ENDPOINT`: ses region endpoint, e.g. email.eu-central-1.amazonaws.com. Required when using SES.\n- `AWS_ACCESS_KEY_ID`: If using Amazon SES, these form part of your SES credentials.\n- `AWS_SECRET_ACCESS_KEY`: If using Amazon SES, these form part of your SES credentials.",
      "source_content_hash": "f7357eb4afe60a9c857aa640a6fc51ecd9233d2f9d0065db3f4d9d450f8ee4df",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- `AWS_SES_REGION_NAME`: 使用Amazon SES时指定包含已验证发件邮箱的区域（如eu-central-1）。默认为us-east-1\n- `AWS_SES_REGION_ENDPOINT`: SES区域端点（如email.eu-central-1.amazonaws.com）。使用SES时必须配置\n- `AWS_ACCESS_KEY_ID`: 使用Amazon SES时作为凭证组成部分\n- `AWS_SECRET_ACCESS_KEY`: 使用Amazon SES时作为凭证组成部分"
      }
    },
    {
      "segment_id": "e5878bb6",
      "source_content": "### API Telemetry",
      "source_content_hash": "9c98d364d7047dc881165b383a0b3072286a59bb9d4192addfcfc28090250dcd",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### API遥测"
      }
    },
    {
      "segment_id": "12bc7444",
      "source_content": "Flagsmith collects information about self hosted installations. This helps us understand how the platform is being used.\nThis data is _never_ shared outside of the organisation, and is anonymous by design. You can opt out of sending this\ntelemetry on startup by setting the `ENABLE_TELEMETRY` environment variable to `False`.",
      "source_content_hash": "9a644e6bdb5bc6bebd19095884e357c5731417bdc37a232615d560841045c2d6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Flagsmith会收集自托管实例的使用信息以分析平台使用情况。这些数据_绝不_对外共享，且设计上保持匿名。可通过设置`ENABLE_TELEMETRY`环境变量为`False`来禁用遥测功能。"
      }
    },
    {
      "segment_id": "30aa9816",
      "source_content": "We collect the following data on startup per API server instance:",
      "source_content_hash": "b4463f7b32403291e6adaea23118ac4f25e3a85f919c7e3653bdb3c7d8874b62",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "每个API服务器实例启动时收集以下数据："
      }
    },
    {
      "segment_id": "b321d4cc",
      "source_content": "- Total number of Organisations\n- Total number of Projects\n- Total number of Environments\n- Total number of Features\n- Total number of Segments\n- Total number of Users\n- DEBUG django variable\n- ENV django variable\n- API server external IP address",
      "source_content_hash": "ce7e41d57d2288c0735d3e333c183edcc457ce750c72b65c085db4d67684c5d5",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 组织总数\n- 项目总数\n- 环境总数\n- 功能总数\n- 用户细分总数\n- 用户总数\n- Django的DEBUG变量值\n- Django的ENV变量值\n- API服务器外部IP地址"
      }
    },
    {
      "segment_id": "9a53bcb1",
      "source_content": "### Creating a secret key",
      "source_content_hash": "ca1f8b12622ec5977729bd31c6cecf2256d364c57cd4f31c9187221e1c4412f2",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 创建密钥"
      }
    },
    {
      "segment_id": "bed77f05",
      "source_content": "It is important to also set an environment variable on whatever platform you are using for `DJANGO_SECRET_KEY`. If one\nis not set then Django will create one for you each time the application starts up, however, this will cause unexpected\nbehaviour as it is used by Django for encryption of e.g. session tokens, etc. To avoid these issues, please create set\nthe `DJANGO_SECRET_KEY` variable. Django recommends that this key should be at least 50 characters in length, however,\nit is up to you to configure the key how you wish. Check the `get_random_secret_key()` method in the Django source code\nif you want more information on what the key should look like.",
      "source_content_hash": "af1939ad12bd07245b496e94850cc48eb41811873758450fd68a6f9ac789a5a1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "务必在您所使用的平台上设置 `DJANGO_SECRET_KEY` 环境变量。若未设置，Django 会在每次应用启动时自动生成一个密钥，但这会导致意外行为，因为该密钥被 Django 用于加密会话令牌等数据。为避免这些问题，请手动设置 `DJANGO_SECRET_KEY` 变量。Django 建议该密钥长度至少为 50 个字符，但具体配置方式由您决定。如需了解密钥格式详情，可参考 Django 源码中的 `get_random_secret_key()` 方法。"
      }
    },
    {
      "segment_id": "e151b2af",
      "source_content": "## Running Tests",
      "source_content_hash": "4d7f16177825c2d74ef8a4f890660f9892fe83ade43e429dc84c96afef85ef82",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 运行测试"
      }
    },
    {
      "segment_id": "850ec775",
      "source_content": "The application uses pytest for writing(appropritate use of fixtures) and running tests. Before running tests please\nmake sure that `DJANGO_SETTINGS_MODULE` env var is pointing to the right module, e.g. `app.settings.test`.",
      "source_content_hash": "f3b6a96016a604d84abd3b1d9482b6cae93b35492dd64d7e9d6c81dba0e37c18",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "本应用使用 pytest 编写（合理运用 fixtures）和运行测试。运行测试前请确保 `DJANGO_SETTINGS_MODULE` 环境变量指向正确的模块，例如 `app.settings.test`。"
      }
    },
    {
      "segment_id": "60e22db4",
      "source_content": "To run tests:",
      "source_content_hash": "bc52a8d34c6dddf7cc428e4b2e2f3aa78238553fad3084cacd851b46b2fcbaae",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "运行测试："
      }
    },
    {
      "segment_id": "d0a5d100",
      "source_content": "```bash\nDJANGO_SETTINGS_MODULE=app.settings.test pytest\n```",
      "source_content_hash": "66c44690f46c5564c29bfc759d2dfb6540aef5ff1e62fdae123815d50a197983",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_d0a5d100"
      }
    },
    {
      "segment_id": "0b7ed806",
      "source_content": "## Pre commit",
      "source_content_hash": "a03970388ee9bd4f646adddc6ce620ef835ac12577f23052b2c3772f897abb7e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 预提交钩子"
      }
    },
    {
      "segment_id": "8517ac25",
      "source_content": "The application uses pre-commit configuration ( `.pre-commit-config.yaml` ) to run `black`, `flake8` and `isort`\nformatting before commits.",
      "source_content_hash": "372154198b8ea3ced02405f94c8935acf32e840f568e8fa1faaae19cdca07f0d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "项目通过预提交配置（`.pre-commit-config.yaml`）在提交前自动运行 `black`、`flake8` 和 `isort` 代码格式化工具。"
      }
    },
    {
      "segment_id": "130e2dfb",
      "source_content": "To install pre-commit:",
      "source_content_hash": "ad353e7720fa7286d348644528b7522c72069c4f94abb408befb81116504f041",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "安装预提交钩子："
      }
    },
    {
      "segment_id": "fa163a68",
      "source_content": "```bash\n# From the repository root\npip install pre-commit\npre-commit install\n```",
      "source_content_hash": "962fadd34ded27701d56df33b1bf6daf213a5b197af87bbd32332518a5330722",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_fa163a68"
      }
    },
    {
      "segment_id": "d83b50df",
      "source_content": "You can also manually run all the checks across the entire codebase with:",
      "source_content_hash": "54ddb9f28d03f39c6791c1722672296b62d92043903b9aab5a87b6dd6bd8585a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "也可手动对整个代码库运行所有检查："
      }
    },
    {
      "segment_id": "d7bc17bf",
      "source_content": "```bash\npre-commit run --all-files\n```",
      "source_content_hash": "9f0422ea4f2a4999f8f5346b33a846f30157d5bcf48d2f29b7dad2b0d611202d",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_d7bc17bf"
      }
    },
    {
      "segment_id": "757c087d",
      "source_content": "## Adding dependencies",
      "source_content_hash": "c228e29fd6c38c0878c7c849c5e04e9c813e8fb697c524bc51c275e7908965fb",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 添加依赖"
      }
    },
    {
      "segment_id": "1dffcdf5",
      "source_content": "To add a python dependency, add it to requirements.txt / requirements-dev.txt with it's current version number.",
      "source_content_hash": "61bdc8930ae989e7744b812224f14826ec3c4966f82e4c39c305d1a670b2dd70",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "添加 Python 依赖时，请将其当前版本号写入 requirements.txt 或 requirements-dev.txt。"
      }
    },
    {
      "segment_id": "89da6bb6",
      "source_content": "## Caching",
      "source_content_hash": "662dcec212d64216418e4285034eda4d5cd40aea26d13a431f995130322cb514",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 缓存机制"
      }
    },
    {
      "segment_id": "e8bf4d18",
      "source_content": "The application makes use of caching in a couple of locations:",
      "source_content_hash": "68906279f1e7a500bdf7cfd878fd02c2057deea7c838199637b7f0211573307d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "应用在以下场景使用缓存："
      }
    },
    {
      "segment_id": "24c2f6a9",
      "source_content": "1. Environment authentication - the application utilises an in memory cache for the environment object on all endpoints\n   that use the X-Environment-Key header.\n2. Environment flags - the application utilises an in memory cache for the flags returned when calling /flags. The\n   number of seconds this is cached for is configurable using the environment variable `\"CACHE_FLAGS_SECONDS\"`\n3. Project Segments - the application utilises an in memory cache for returning the segments for a given project. The\n   number of seconds this is cached for is configurable using the environment variable\n   `\"CACHE_PROJECT_SEGMENTS_SECONDS\"`.",
      "source_content_hash": "8ffd468d83b0dbdf3fefa65adfd0d96ce7b5214ea9096f2bee53596b7ca8f6ba",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "1. 环境认证 - 所有使用 X-Environment-Key 请求头的端点会缓存环境对象至内存\n2. 环境特征标志 - 调用 /flags 接口返回的特征标志会缓存至内存，缓存时长可通过环境变量 `\"CACHE_FLAGS_SECONDS\"` 配置\n3. 项目用户分群 - 项目分群数据会缓存至内存，缓存时长可通过环境变量 `\"CACHE_PROJECT_SEGMENTS_SECONDS\"` 配置"
      }
    },
    {
      "segment_id": "6c2c7917",
      "source_content": "## Unified Front End and Back End Build",
      "source_content_hash": "a65b269653d8405ff75b3ad0b5e0b75d37cf02532996a8ee9ac9141ce6da65a0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 前后端统一构建"
      }
    },
    {
      "segment_id": "c1e7eaab",
      "source_content": "You can run Flagsmith as a single application/docker container using our unified builds. These are available on\n[Docker Hub](https://hub.docker.com/repository/docker/flagsmith/flagsmith) but you can also run the front end as part of\nthe Django Application. Steps to do this:",
      "source_content_hash": "51bf2f32212250fb346c5e81623970ecf76556b46e6362bcb69e28ec7055e276",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "您可通过统一构建将 Flagsmith 作为单一应用/Docker 容器运行。这些构建已发布至 [Docker Hub](https://hub.docker.com/repository/docker/flagsmith/flagsmith)，也可将前端作为 Django 应用的一部分运行。步骤如下："
      }
    },
    {
      "segment_id": "af20384f",
      "source_content": "1. `cd frontend; npm run bundledjango`\n2. `cd ../api; python manage.py collectstatic`\n3. `python manage.py runserver`",
      "source_content_hash": "fb4be7c0f8c15d45906a1a3520a8ed6baffc942fe2c4a58c0b97874c37657be5",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "1. `cd frontend; npm run bundledjango`\n2. `cd ../api; python manage.py collectstatic`\n3. `python manage.py runserver`"
      }
    },
    {
      "segment_id": "fb020fb7",
      "source_content": "### How it works",
      "source_content_hash": "14b51d1baabe63d7520dbb80d1ae75de1b0418131ca5b43e7605277817d59c44",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 实现原理"
      }
    },
    {
      "segment_id": "dbd18971",
      "source_content": "Webpack compiles a front end build, sourcing `api/app/templates/index.html`. It places the compiled JS and CSS assets to\n`api/static` then copies the annotated `index.html` page to `api/app/templates/webpack/index.html`.",
      "source_content_hash": "7b631ff54af13d564866d4f6f2bfc74074366f0ff6229f439c5506e4f94dc8a1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Webpack 编译前端构建时，会以 `api/app/templates/index.html` 为模板，将编译后的 JS 和 CSS 资源输出至 `api/static` 目录，同时将注解后的 `index.html` 复制到 `api/app/templates/webpack/index.html`。"
      }
    },
    {
      "segment_id": "44fd9885",
      "source_content": "The Django `collectstatic` command then copies all the additional static assets that Django needs, including\n`api/app/templates/webpack/index.html`, into `api/static`.",
      "source_content_hash": "ca1f7a59b6ff4156f93a07cabb7ace88be1714d59560dfd0029d10d10ab97526",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Django 的 `collectstatic` 命令随后将所有静态资源（包括 `api/app/templates/webpack/index.html`）收集至 `api/static` 目录。"
      }
    },
    {
      "segment_id": "7020a57c",
      "source_content": "## Information for Developers working on the project",
      "source_content_hash": "98fedc497821b13cec27e5b2197cfbfe896eb120691e7ac566daf576ac333bf6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 开发者指南"
      }
    },
    {
      "segment_id": "74f95bc3",
      "source_content": "### Stack",
      "source_content_hash": "939167851ea78173e72bbc4aee68d4327b3095ebefefba3cf26aa7d36632e8cd",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 技术栈"
      }
    },
    {
      "segment_id": "03a39d26",
      "source_content": "- Python\n- Django\n- Django Rest Framework",
      "source_content_hash": "7859918e7728bbf7fe7f007fa99f43b48ff28a59800a2585a90bc2d3997d611a",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- Python\n- Django\n- Django Rest Framework"
      }
    },
    {
      "segment_id": "6558c87d",
      "source_content": "### Development Environment for Contributers",
      "source_content_hash": "fa3a3caf623fac7c489df1ff40caa45e0d7d50df33819eb72147aad6f9dfbbfc",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 贡献者开发环境"
      }
    },
    {
      "segment_id": "c08b6492",
      "source_content": "We're using [pip-tools](https://github.com/jazzband/pip-tools) to manage packages and dependencies.",
      "source_content_hash": "85ab9c0f87432b9b0cc0d90a26c7160d4fe6bf02396cefabe3e45870b7543502",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "我们使用 [pip-tools](https://github.com/jazzband/pip-tools) 管理包依赖。"
      }
    },
    {
      "segment_id": "227b5df5",
      "source_content": "To upgrade packages or add new ones:",
      "source_content_hash": "12d39a4ac2f6a9aa2f6439c9fb21708c6401891a31eb8ccd03da2b0db6d39ade",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "升级或新增依赖包："
      }
    },
    {
      "segment_id": "4770f21e",
      "source_content": "```bash\npip install -r requirements-dev.txt\npip-compile\n```",
      "source_content_hash": "5ae41032b96fd32e06f3e61ec34bd1cfca4a8d354fd1bd525b9faf7c76bb69bd",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_4770f21e"
      }
    },
    {
      "segment_id": "34416204",
      "source_content": "### Requirements with pip-tools",
      "source_content_hash": "c36852035d466d0b040256818a81393288e1c2a1801a4723767ff449b298d387",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### pip-tools 依赖管理"
      }
    },
    {
      "segment_id": "4bfb1f31",
      "source_content": "We are using [pip-tools](https://github.com/jazzband/pip-tools) to manage dependencies.",
      "source_content_hash": "d89d0eac9d53687018b2bbdb2a0a78109d6ce7e77f8ccf78cbac9c426c8103c5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "本项目使用 [pip-tools](https://github.com/jazzband/pip-tools) 管理依赖关系。"
      }
    },
    {
      "segment_id": "dbea1fe8",
      "source_content": "To add a new library to the project, edit requirements.in, then:",
      "source_content_hash": "dcd48ee509b17fb10ab1ad8a0cc57a3bf43b8428436c35b363af667c9ac8e5b0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "添加新库时，请先编辑 requirements.in 文件，然后执行："
      }
    },
    {
      "segment_id": "4590a1f9",
      "source_content": "```bash\n# This step will overwrite requirements.txt\npip-compile requirements.in\npip install -r requirements.txt\n```",
      "source_content_hash": "a8dc7230483f09b4c6a9140c819d882c1b5a177d533f74ab0c540356d992638a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_4590a1f9"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-v1.0/deployment/locally-api.md",
  "last_updated_timestamp": "2025-06-10T10:43:50.776862+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "38a29b8143e10e5af3c192d06067c23683f01df34e59d1e2af0b0d273499cebe"
  }
}