{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-v1.0/basic-features/managing-identities.md",
  "source_file_content_hash": "cd0726627f1f8f825907842e94903713e9890185acfbfcbcc9915c75ac226eb0",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: Managing Identities\ndescription: Manage user traits and properties independently of your application.\n---",
      "source_content_hash": "2ab6c8fb5b7127bc83df9b05c6ca91bc984d8e64fc7bd46164179ee560bbdcd7",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "Feature flags are great, but they can be a very blunt tool, only allowing you to enable or disable flags across your\nentire user base. In order to target users more precisely, and to be able to perform\n[staged feature roll-outs](/guides-and-examples/staged-feature-rollouts.md) or\n[A/B and multi-variate tests](/advanced-use/ab-testing.md), you need to _Identify your Users_.",
      "source_content_hash": "06eb9db70d0b379a03814f3443c45df75b419a95a173c1d5b38cb62ee20fe0de",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "功能标志非常实用，但它们可能是一个较为粗放的工具，仅允许您在整个用户群体中启用或禁用标志。为了更精准地定位用户，并能够执行[分阶段功能发布](/guides-and-examples/staged-feature-rollouts.md)或[A/B及多变量测试](/advanced-use/ab-testing.md)，您需要_识别您的用户_。"
      }
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "Identities are created within Flagsmith automatically the first time they are identified from your client SDKs.\nGenerally you'd make a call to identify a user with a unique string/id whenever they log into your app/site. The SDK\nwill then send an API message to the Flagsmith API, with the relevant Identity information.",
      "source_content_hash": "0e477662ff3b5e134993188656e00c4791e2604058a68e11e7904df9aa1e6319",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "身份（Identities）在Flagsmith中首次通过客户端SDK识别时会自动创建。通常，您会在用户登录您的应用/网站时调用一个带有唯一字符串/ID的方法来识别用户。随后，SDK会向Flagsmith API发送包含相关身份信息的API请求。"
      }
    },
    {
      "segment_id": "ac44a45c",
      "source_content": ":::tip\n\nThe SDK part of the Flagsmith API is public by design. The Environment Key is designed to be public and is easy to\nview/find when building a client integration. When identifying users, it is important to use an Identity value that is\nnot easy to guess. For example, if you used an incrementing integer to identify your users, it would be trivial to\nrequest Identities by enumerating this integer. This would effectively give public access to any user traits that are\nassociated with users.\n\nWe strongly recommend using an unguessable, unidentifiable Identity Key, such as a\n[GUID](https://en.wikipedia.org/wiki/Universally_unique_identifier), when identifying your users, to prevent\nunintentionally leaking Identity trait data.\n\n:::",
      "source_content_hash": "b32bf184be29fbdb67f2715aaf6ccdea9597ead3fc84cdce84484f4fe07e78bc",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::tip\n\nFlagsmith API的SDK部分设计为公开是经过深思熟虑的。环境密钥（Environment Key）设计为公开且易于在构建客户端集成时查看/找到。在识别用户时，使用一个不易猜测的身份值非常重要。例如，如果您使用递增的整数来识别用户，那么通过枚举这个整数来请求身份将变得轻而易举。这将有效地公开与用户相关的任何特征数据。\n\n我们强烈建议使用不可猜测、不可识别的身份密钥，例如[GUID](https://en.wikipedia.org/wiki/Universally_unique_identifier)，以防止无意中泄露身份特征数据。\n\n:::"
      }
    },
    {
      "segment_id": "f2f30ae8",
      "source_content": "## Identity Overrides",
      "source_content_hash": "39eaa0ea0cf77f9f3381ccf7a5d466a0196724563945ac09381ae1dc8ac0aec7",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 身份覆盖"
      }
    },
    {
      "segment_id": "dfe931a2",
      "source_content": "Once you have uniquely identified a user, you can then override features for that user from your environment defaults.\nFor example, you've pushed a feature into production, but the relevant feature flag is still hiding that feature to all\nof your users. You can now override that flag for your own user, and test that feature. Once you are happy with\neverything, you can roll that feature out to all of your users by enabling the flag itself.",
      "source_content_hash": "e673cca39dc72efd47dddea23621135643c9390114e68e90a327b36cd7f84c5e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "一旦您唯一识别了一个用户，您就可以为该用户从环境默认值中覆盖功能。例如，您已将某个功能推送到生产环境，但相关的功能标志仍对所有用户隐藏该功能。您现在可以为自己的用户覆盖该标志，并测试该功能。当您对一切满意后，可以通过启用标志本身将该功能推广给所有用户。"
      }
    },
    {
      "segment_id": "517051a7",
      "source_content": "Identities are specific and individual for each Environment within your project. For example, joe@yourwebsite.com would\nbe a different identity in your development environment to the one in production, and they can have different features\nenabled for each environment.",
      "source_content_hash": "004f106b26d475310eec8562b2668cf3a1a4ccc0df526477cbb9dd9578f5c6d4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "身份在您的项目中的每个环境中都是特定且独立的。例如，joe@yourwebsite.com在开发环境中的身份将与生产环境中的身份不同，并且可以为每个环境启用不同的功能。"
      }
    },
    {
      "segment_id": "782c902a",
      "source_content": "## Identity Feature Flags",
      "source_content_hash": "839d62525898014b461351ea0dc70f9ae08ead6a79c3c79bdb023749efc9ada3",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 身份功能标志"
      }
    },
    {
      "segment_id": "50746522",
      "source_content": "By default, Identities receive the default flags for their environment. The main use-case for identities is to be able\nto override flags and configs on a per-identity basis. You can do this by navigating to the Users page, finding the User\nand modifying their Flags.",
      "source_content_hash": "bfb758e49a47e676d8e3ce6d7647a0d005e42fb435ca6d53cc790dc848bf1284",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "默认情况下，身份会接收其环境的默认标志。身份的主要用例是能够基于每个身份覆盖标志和配置。您可以通过导航到“用户”页面，找到用户并修改其标志来实现这一点。"
      }
    },
    {
      "segment_id": "8bddee80",
      "source_content": "## Identity Traits",
      "source_content_hash": "9f8a0be430cd74975eec8574b49ea9d76be86c2e02665a28eef78f70bfef29d6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 身份特征"
      }
    },
    {
      "segment_id": "a9d49f92",
      "source_content": "You can also use Flagsmith to store 'Traits' against identities. Traits are simply key/value pairs that are associated\nwith individual Identities for a particular Environment. Traits have two purposes outlined below, but the main use case\nis to drive [Segments](managing-segments.md).",
      "source_content_hash": "852327e75e97196d1148a68aec496dee1f3ee0d08f01c45cb2f8194ef658add6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "您还可以使用Flagsmith存储与身份关联的“特征”（Traits）。特征只是与特定环境中单个身份关联的键/值对。特征有两个主要用途，如下所述，但主要用例是驱动[分段](managing-segments.md)。"
      }
    },
    {
      "segment_id": "a646eac9",
      "source_content": ":::important\n\nThe maximum size of each individual Trait Value is **_2000 bytes_**. You cannot store more data than that in a single\ntrait, and the API will return a 500 error if you try to do so.\n\n:::",
      "source_content_hash": "42bc190e190567f6285e583b37e4e8c1d6507e6b74102daf4413cb3f2f5ae0dd",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::important\n\n每个特征值的最大大小为**_2000字节_**。您不能在单个特征中存储更多数据，如果尝试这样做，API将返回500错误。\n\n:::"
      }
    },
    {
      "segment_id": "7283cdac",
      "source_content": "### Using Traits to drive Segments",
      "source_content_hash": "dfc9e97e38436e26b1aa00dcad70293ceef6f227c3131183dbdb6f5efa9f3e2d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 使用特征驱动分段"
      }
    },
    {
      "segment_id": "1131ef75",
      "source_content": "Let's say you are working on a mobile app, and you want to control a feature based on the version of the application\nthat the Identity is using. When you integrate the Flagsmith SDK, you would pass the application version number to the\nFlagsmith platform as a trait key/value pair:",
      "source_content_hash": "258baac10d29699e16410536b1fac82ef159852c1ca0258debd2e34e892ccaba",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "假设您正在开发一个移动应用，并且希望基于身份使用的应用程序版本控制某个功能。在集成Flagsmith SDK时，您可以将应用程序版本号作为特征键/值对传递给Flagsmith平台："
      }
    },
    {
      "segment_id": "7a577a50",
      "source_content": "```java\nFeatureUser user = new FeatureUser();\nuser.setIdentifier(\"user_512356\");\n\nFlagsAndTraits flagsAndTraits = flagsmithClient.identifyUserWithTraits(FeatureUser user, Arrays.asList(\n    trait(null, \"app_version\", Application.getVersion());\n```",
      "source_content_hash": "40694dbde8b29abaafc4f24acf36d80292e625c3547d244e34e4ec23f3101a85",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_7a577a50"
      }
    },
    {
      "segment_id": "eab056be",
      "source_content": "Here we are setting the trait key `app_version` with the value of `Application.getVersion()`.You can now create a\n[Segment](managing-segments.md) that is based on the application version and manage features based on the application\nversion.",
      "source_content_hash": "e0d3fdc66dbaaeea15e4b3e32a9b4633f8a24da68ba1432b97b429485deb7b45",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "这里我们将特征键`app_version`设置为`Application.getVersion()`的值。您现在可以创建一个基于应用程序版本的[分段](managing-segments.md)，并根据应用程序版本管理功能。"
      }
    },
    {
      "segment_id": "afa378f7",
      "source_content": "Traits are completely freeform. You can store any number of traits, with any relevant information you see fit, in the\nplatform and then use Segments to control features based on these Trait values.",
      "source_content_hash": "697b5c4dba0bea418f9cf0a80cd90c2c5cb2ade0420a8fe83e2bd329a7d06417",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "特征是完全自由的。您可以在平台中存储任意数量的特征，包含任何您认为相关的信息，然后使用分段基于这些特征值控制功能。"
      }
    },
    {
      "segment_id": "2fd0be2a",
      "source_content": "### Using Traits as a data-store",
      "source_content_hash": "9ee74e6e60187f7ae4dc40f6f09f55d30c841517f56e136baa88f306d2c4054e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 使用特征作为数据存储"
      }
    },
    {
      "segment_id": "6270d577",
      "source_content": "Traits can also be used to store additional data about your users that would be cumbersome to store within your\napplication. Some possible uses for traits could be:",
      "source_content_hash": "1ced5018b8c33585a5cf7ae8e5d4201029f075e02f9bf6ab3b31b0bf07531fb1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "特征还可以用于存储关于用户的额外数据，这些数据在您的应用程序中存储可能会很繁琐。特征的一些可能用途包括："
      }
    },
    {
      "segment_id": "5dbc17cf",
      "source_content": "- Storing whether the user has accepted a new set of terms and conditions.\n- Storing the last viewed page of the application so that you can resume the users place later, across any device.",
      "source_content_hash": "371ea47243f6026bb52c7edb5c3cb2115571f56e594db10726d0147c1a89b19b",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 存储用户是否已接受新版条款与条件。\n- 存储应用内最后浏览的页面位置，以便跨设备恢复用户进度。"
      }
    },
    {
      "segment_id": "2547a6bb",
      "source_content": "Generally if they are lower-value pieces of information about your user, it might be simpler/easier to store them in\nFlagsmith rather than in your core application.",
      "source_content_hash": "07f0915d133ef1aa68dfcb7438681bcc449d4bbfa0e3c98f70d7dd0c42cc0299",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "通常对于用户相关低价值信息，存储在Flagsmith中比存入核心应用更简便。"
      }
    },
    {
      "segment_id": "5803caac",
      "source_content": "Traits are stored natively as either numbers, strings or booleans.",
      "source_content_hash": "a258d5bbad515b5f6c6f01f1a1d0b53d2feae0a6a0d6448ce80831787bf546a6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "特征值原生支持三种数据类型：数值型、字符串型或布尔型。"
      }
    },
    {
      "segment_id": "51867d16",
      "source_content": "![Image](/img/identity-details.png)",
      "source_content_hash": "f5ac3210fef1e5737055b0007e25b94850df0943e12ce200b4fb931bd98550d3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "![Image](/img/identity-details.png)"
      }
    },
    {
      "segment_id": "e33a2404",
      "source_content": "## Traits powering Segments",
      "source_content_hash": "9855401cbc55b1e6dcd91fafd955514f7e341fd886d8eae2f9bc878a8458308c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 驱动用户分组的特征"
      }
    },
    {
      "segment_id": "82e90254",
      "source_content": "Traits can be used within your application, but they also be used to power\n[Segments](/basic-features/managing-segments.md).",
      "source_content_hash": "11d58708bd1ec16b62aef3c084b4bbda86ee8ffd9c9ce866168264fd84cd7b51",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "特征既可在应用程序中使用，也可用于构建[用户分组](/basic-features/managing-segments.md)。"
      }
    },
    {
      "segment_id": "c19de48a",
      "source_content": "## Trait Value Data Types",
      "source_content_hash": "d9068da8f3afe7a75ea8c24999f0cf806d324e3045e2ecdcd13941e5b7539c67",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 特征值数据类型"
      }
    },
    {
      "segment_id": "6ca4479f",
      "source_content": "Trait values can be stored as one of four different data types:",
      "source_content_hash": "acd1ed123fa5b4091c5ff4af6835f828b03c8e9eab34f1cb568d83a66157fe13",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "特征值支持四种存储类型："
      }
    },
    {
      "segment_id": "936011bd",
      "source_content": "- Boolean\n- String (max length 2000 bytes)\n- Int (32 bit signed)\n- Float (typically has a range of around 1E-307 to 1E+308 with a precision of at least 15 digits)",
      "source_content_hash": "adc575dfb111dd8993ba18287feab5d19338a810251b5f831e03653c19adfe78",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 布尔型\n- 字符串型（最大长度2000字节）\n- 整型（32位有符号）\n- 浮点型（典型取值范围约1E-307至1E+308，精度至少15位）"
      }
    },
    {
      "segment_id": "0e80209e",
      "source_content": "If you need to store 64 bit integers or very high precision floats we suggest storing them as Strings and then doing the\ntype conversion within the SDK.",
      "source_content_hash": "e0759801a3d1688e4b16b8f3b2f85d47e51fb8d49c793f207f03a786e9203607",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如需存储64位整数或超高精度浮点数，建议转为字符串存储，并在SDK内进行类型转换。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-v1.0/basic-features/managing-identities.md",
  "last_updated_timestamp": "2025-06-08T19:31:17.929797+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "cd0726627f1f8f825907842e94903713e9890185acfbfcbcc9915c75ac226eb0"
  }
}